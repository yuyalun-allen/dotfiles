"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Environment
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set runtimepath+=$XDG_DATA_HOME/vim
set packpath^=$XDG_DATA_HOME/vim
set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

let g:netrw_home = $XDG_DATA_HOME."/vim"
let g:netrw_liststyle = 3

if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=500
set updatetime=100
set termguicolors

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Disable modeline as a security precaution
set modelines=0
set nomodeline

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Fast command
nmap ! :!

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Use system clipboard
set clipboard+=unnamedplus

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Decrease delay of <esc>
set ttimeoutlen=5

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Show line number
set number
set relativenumber
set laststatus=2
" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=1

" No annoying sound on errors
set noerrorbells visualbell t_vb=

" Add a bit extra margin to the left
set foldcolumn=1

" 跳转到下一个空行
function! JumpToNextBlankLine()
    let save_pos = getpos(".")
    if search('^\s*$', 'W')
    else
        call setpos('.', save_pos)
        echo "No more blank lines"
    endif
endfunction

" 跳转到上一个空行
function! JumpToPrevBlankLine()
    let save_pos = getpos(".")
    if search('^\s*$', 'bW')
    else
        call setpos('.', save_pos)
        echo "No more blank lines"
    endif
endfunction

" quick jump to next/prev blank line
nnoremap ]<Space> :call JumpToNextBlankLine()<CR>
nnoremap [<Space> :call JumpToPrevBlankLine()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

set t_Co=256
set background=light
colorscheme PaperColor

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
" In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "\<CR>"
    else
        execute "normal /" . l:pattern . "\<CR>"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <leader>b :ls<cr>

" Close the current buffer
map <leader>bd :bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" Move a line of text using ALT+[jk] or Command+[jk] on mac
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
nnoremap <C-w>x <C-w>c

" Customizing
set pastetoggle=<F10>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ALE settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <leader>d :ALEDetail<CR>
let g:ale_completion_autoimport = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Clap settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

hi ClapCurrentSelection gui=bold guibg=#7a804d guifg=black

nmap <C-p> :Clap<CR> 
" Specify this variable to enable the plugin feature.
let g:clap_plugin_experimental = v:true
"augroup TreeSitterHighlight
"    autocmd!
"    autocmd FileType python,go ClapAction syntax.treeSitterHighlight
"augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Copilot settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:copilot_enabled = v:false


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => LSP settings
            \ 'cmd': {server_info->['ty', 'server']},
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Register LS
if executable('pyright-langserver')
    augroup lsp_pyright
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'pyright',
            \ 'cmd': {server_info->['pyright-langserver', '--stdio']},
            \ 'whitelist': ['python'],
            \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'pyproject.toml'))},
            \ 'workspace_config': {
            \   'python': {
            \     'analysis': {
            \       'typeCheckingMode': 'basic'
            \     }
            \   }
            \ }
            \ })
    augroup END
endif

if executable('clangd')
    augroup lsp_clangd
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
            \ 'workspace_config': {
            \   'clangd': {
            \     'fallbackFlags': ['-std=c++17']
            \   }
            \ }
            \ })
    augroup END
endif

if executable('rust-analyzer')
    augroup lsp_rust
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'rust-analyzer',
            \ 'cmd': {server_info->['rust-analyzer']},
            \ 'whitelist': ['rust'],
            \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Cargo.toml'))},
            \ 'workspace_config': {
            \   'rust-analyzer': {
            \     'checkOnSave': {
            \       'command': 'clippy'
            \     }
            \   }
            \ }
            \ })
    augroup END
endif

" Register gopls with vim-lsp
if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls']},
        \ 'allowlist': ['go'],
        \ 'workspace_config': {
        \     'gopls': {
        \         'staticcheck': v:true,
        \         'completeUnimported': v:true,
        \         'usePlaceholders': v:true,
        \         'analyses': {
        \             'unusedparams': v:true,
        \             'shadow': v:true,
        \         },
        \         'gofumpt': v:true,
        \     },
        \ },
        \ 'initialization_options': {
        \     'gofumpt': v:true,
        \ }
        \ })
endif

if executable('ruby-lsp')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'ruby-lsp',
    \ 'cmd': {server_info->['ruby-lsp']},
    \ 'allowlist': ['ruby'],
    \ 'workspace_config': {
    \   'ruby-lsp': {
    \     'formatter': 'rubocop',
    \     'diagnostics': 'true',
    \   }
    \ }
    \ })
endif

" Key mappings

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gD <plug>(lsp-type-definition)
    nmap <buffer> <leader>fx <plug>(lsp-code-action)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-b> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Fold action
set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()

" For asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

let g:lsp_semantic_enabled = 1

" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('/tmp/vim-lsp.log')
" nnoremap <leader>sl :split /tmp/vim-lsp.log<CR>


" Semantic highlight

let g:lsp_settings = {
  \ 'clangd': {
  \   'semantic_highlighting': {
  \     'Function': 'Function',
  \     'Variable': 'Variable'
  \ }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For markdown image pasting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd FileType markdown,tex nmap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>

